// Products Management Module

// Load products page
function loadProductsPage() {
    loadProductsTable();
    loadCategoriesForSelect(); // Ensure categories are loaded for the product form
}

// Load products table
function loadProductsTable() {
    const products = dataManager.getProducts();
    const tableBody = document.getElementById("products-table-body");
    
    if (!tableBody) return;

    if (products.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">
                    <div class="empty-state">
                        <div class="empty-state-icon">üì¶</div>
                        <h3>‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶£‡ßç‡¶Ø ‡¶®‡ßá‡¶á</h3>
                        <p>‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶£‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</p>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    tableBody.innerHTML = products.map(product => `
        <tr>
            <td>${product.name}</td>
            <td>${product.sku}</td>
            <td>${getCategoryName(product.category)}</td>
            <td>${formatCurrency(product.price)}</td>
            <td>${product.stock}</td>
            <td>
                <span class="status-badge ${product.stock > 0 ? "status-active" : "status-inactive"}">
                    ${product.stock > 0 ? "‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º" : "‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º"}
                </span>
                ${product.stock <= 10 && product.stock > 0 ? 
                    "<span class="status-badge status-low-stock">‡¶ï‡¶Æ ‡¶∏‡ßç‡¶ü‡¶ï</span>" : ""}
            </td>
            <td>
                <button class="action-btn" onclick="editProduct(\'${product.id}\')">‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ</button>
                <button class="action-btn delete" onclick="deleteProduct(\'${product.id}\')">‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®</button>
            </td>
        </tr>
    `).join("");
}

// Get category name
function getCategoryName(categoryId) {
    const categories = dataManager.getCategories();
    const category = categories.find(cat => cat.id === categoryId);
    return category ? category.name : categoryId;
}

// Load categories into the product form select dropdown
function loadCategoriesForSelect() {
    const categorySelect = document.getElementById("product-category");
    if (!categorySelect) return;

    const categories = dataManager.getCategories();
    categorySelect.innerHTML = 
        `<option value="">‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>` +
        categories.map(cat => `<option value="${cat.id}">${cat.name}</option>`).join("");
}

// Open Add Product Modal
function openAddProductModal() {
    currentEditingProduct = null; // Reset for new product
    const form = document.getElementById("product-form");
    if (form) form.reset(); // Clear form fields
    loadCategoriesForSelect(); // Load categories for the dropdown
    openModal("product-modal");
}

// Save product
function saveProduct(event) {
    event.preventDefault(); // Prevent default form submission
    const form = document.getElementById("product-form");
    if (!form) return;

    // Get form data
    const productData = {
        name: document.getElementById("product-name").value.trim(),
        sku: document.getElementById("product-sku").value.trim(),
        category: document.getElementById("product-category").value,
        price: parseFloat(document.getElementById("product-price").value) || 0,
        stock: parseInt(document.getElementById("product-stock").value) || 0,
        description: document.getElementById("product-description").value.trim()
    };

    // Validate required fields
    if (!productData.name) {
        showNotification("‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®", "error");
        soundManager.playError();
        return;
    }

    if (!productData.sku) {
        showNotification("SKU ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®", "error");
        soundManager.playError();
        return;
    }

    if (!productData.category) {
        showNotification("‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", "error");
        soundManager.playError();
        return;
    }

    if (productData.price <= 0) {
        showNotification("‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®", "error");
        soundManager.playError();
        return;
    }

    if (productData.stock < 0) {
        showNotification("‡¶∏‡ßç‡¶ü‡¶ï ‡ß¶ ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá", "error");
        soundManager.playError();
        return;
    }

    // Check for duplicate SKU
    const existingProduct = dataManager.getProductBySku(productData.sku);
    if (existingProduct && (!currentEditingProduct || existingProduct.id !== currentEditingProduct)) {
        showNotification("‡¶è‡¶á SKU ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", "error");
        soundManager.playError();
        return;
    }

    // Save or update product
    let success = false;
    if (currentEditingProduct) {
        // Update existing product
        success = dataManager.updateProduct(currentEditingProduct, productData);
        if (success) {
            showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", "success");
        }
    } else {
        // Add new product
        success = dataManager.addProduct(productData);
        if (success) {
            showNotification("‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡¶£‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", "success");
        }
    }

    if (success) {
        soundManager.playSuccess();
        closeModal();
        loadProductsTable();
        
        // Reload products in sales page if it's currently active
        if (currentPage === "sales") {
            loadProducts();
        }
    } else {
        showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•", "error");
        soundManager.playError();
    }
}

// Edit product
function editProduct(productId) {
    const product = dataManager.getProductById(productId);
    if (!product) {
        showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø", "error");
        soundManager.playError();
        return;
    }

    // Set current editing product
    currentEditingProduct = productId;

    // Fill form with product data
    document.getElementById("product-name").value = product.name;
    document.getElementById("product-sku").value = product.sku;
    document.getElementById("product-category").value = product.category;
    document.getElementById("product-price").value = product.price;
    document.getElementById("product-stock").value = product.stock;
    document.getElementById("product-description").value = product.description || "";

    // Open modal
    openModal("product-modal");
}

// Delete product
function deleteProduct(productId) {
    const product = dataManager.getProductById(productId);
    if (!product) {
        showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø", "error");
        soundManager.playError();
        return;
    }

    // Check if product is in any sales
    const sales = dataManager.getSales();
    const productInSales = sales.some(sale => 
        sale.items.some(item => item.productId === productId)
    );

    let confirmMessage = `‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø "${product.name}" ‡¶™‡¶£‡ßç‡¶Ø‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?`;
    if (productInSales) {
        confirmMessage += "\n\n‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ: ‡¶è‡¶á ‡¶™‡¶£‡ßç‡¶Ø‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶Ø‡¶º‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§";
    }

    if (confirm(confirmMessage)) {
        if (dataManager.deleteProduct(productId)) {
            showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", "success");
            soundManager.playSuccess();
            loadProductsTable();
            
            // Reload products in sales page if it's currently active
            if (currentPage === "sales") {
                loadProducts();
            }
        } else {
            showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•", "error");
            soundManager.playError();
        }
    }
}

// Generate SKU
function generateSKU() {
    const name = document.getElementById("product-name").value.trim();
    const category = document.getElementById("product-category").value;
    
    if (!name || !category) {
        showNotification("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶¶‡¶ø‡¶®", "error");
        return;
    }

    // Generate SKU based on category and name
    const categoryCode = category.substring(0, 3).toUpperCase();
    const nameCode = name.substring(0, 3).toUpperCase().replace(/[^A-Z]/g, "");
    const randomCode = Math.random().toString(36).substring(2, 5).toUpperCase();
    
    const sku = `${categoryCode}-${nameCode}-${randomCode}`;
    document.getElementById("product-sku").value = sku;
    
    soundManager.playClick();
}

// Import products from CSV
function importProducts() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".csv";
    
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function(e) {
            const csv = e.target.result;
            parseAndImportProducts(csv);
        };
        reader.readAsText(file);
    };
    
    input.click();
}

// Parse and import products from CSV
function parseAndImportProducts(csv) {
    try {
        const lines = csv.split("\n");
        const headers = lines[0].split(",").map(h => h.trim());
        
        // Expected headers: name, sku, category, price, stock, description
        const requiredHeaders = ["name", "sku", "category", "price", "stock"];
        const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
        
        if (missingHeaders.length > 0) {
            showNotification(`‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§ ‡¶ï‡¶≤‡¶æ‡¶Æ: ${missingHeaders.join(", ")}`, "error");
            return;
        }

        const products = [];
        let successCount = 0;
        let errorCount = 0;

        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            const values = line.split(",").map(v => v.trim());
            const product = {};

            headers.forEach((header, index) => {
                product[header] = values[index] || "";
            });

            // Validate and convert data types
            if (!product.name || !product.sku || !product.category) {
                errorCount++;
                continue;
            }

            product.price = parseFloat(product.price) || 0;
            product.stock = parseInt(product.stock) || 0;

            if (product.price <= 0) {
                errorCount++;
                continue;
            }

            // Check for duplicate SKU
            if (dataManager.getProductBySku(product.sku)) {
                errorCount++;
                continue;
            }

            if (dataManager.addProduct(product)) {
                successCount++;
            } else {
                errorCount++;
            }
        }

        showNotification(`${successCount}‡¶ü‡¶ø ‡¶™‡¶£‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ${errorCount}‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø`, "success");
        loadProductsTable();
        
    } catch (error) {
        console.error("Error importing products:", error);
        showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•", "error");
    }
}

// Export products to CSV
function exportProducts() {
    const products = dataManager.getProducts();
    
    if (products.length === 0) {
        showNotification("‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶£‡ßç‡¶Ø ‡¶®‡ßá‡¶á", "error");
        return;
    }

    // Create CSV content
    const headers = ["name", "sku", "category", "price", "stock", "description"];
    const csvContent = [
        headers.join(","),
        ...products.map(product => 
            headers.map(header => `"${product[header] || ""}"`).join(",")
        )
    ].join("\n");

    // Download file
    const filename = `products_${formatDate(new Date()).replace(/\//g, "-")}.csv`;
    downloadFile(csvContent, filename, "text/csv");
    
    showNotification("‡¶™‡¶£‡ßç‡¶Ø ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", "success");
}

// Bulk update stock
function bulkUpdateStock() {
    const products = dataManager.getProducts();
    
    if (products.length === 0) {
        showNotification("‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶£‡ßç‡¶Ø ‡¶®‡ßá‡¶á", "error");
        return;
    }

    const stockUpdate = prompt("‡¶∏‡¶¨ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶ï‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßç‡¶ü‡¶ï‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá)");
    
    if (stockUpdate === null) return;
    
    const updateAmount = parseInt(stockUpdate);
    
    if (isNaN(updateAmount)) {
        showNotification("‡¶∏‡¶†‡¶ø‡¶ï ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®", "error");
        return;
    }

    let updatedCount = 0;
    
    products.forEach(product => {
        const newStock = Math.max(0, product.stock + updateAmount);
        if (dataManager.updateProduct(product.id, { stock: newStock })) {
            updatedCount++;
        }
    });

    showNotification(`${updatedCount}‡¶ü‡¶ø ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`, "success");
    loadProductsTable();
}

// Search products in table
function searchProductsTable() {
    const searchTerm = document.getElementById("product-search-table").value.toLowerCase();
    const tableRows = document.querySelectorAll("#products-table-body tr");
    
    tableRows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm) ? "" : "none";
    });
}

// Filter products by category in table
function filterProductsTableByCategory() {
    const category = document.getElementById("product-category-filter").value;
    const products = category === "all" ? 
        dataManager.getProducts() : 
        dataManager.getProductsByCategory(category);
    
    const tableBody = document.getElementById("products-table-body");
    if (!tableBody) return;

    if (products.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">
                    <div class="empty-state">
                        <div class="empty-state-icon">üì¶</div>
                        <h3>‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶£‡ßç‡¶Ø ‡¶®‡ßá‡¶á</h3>
                    </div>
                </td>
            </tr>
        `;
        return;
    }

    tableBody.innerHTML = products.map(product => `
        <tr>
            <td>${product.name}</td>
            <td>${product.sku}</td>
            <td>${getCategoryName(product.category)}</td>
            <td>${formatCurrency(product.price)}</td>
            <td>${product.stock}</td>
            <td>
                <span class="status-badge ${product.stock > 0 ? "status-active" : "status-inactive"}">
                    ${product.stock > 0 ? "‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º" : "‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º"}
                </span>
                ${product.stock <= 10 && product.stock > 0 ? 
                    "<span class="status-badge status-low-stock">‡¶ï‡¶Æ ‡¶∏‡ßç‡¶ü‡¶ï</span>" : ""}
            </td>
            <td>
                <button class="action-btn" onclick="editProduct(\'${product.id}\')">‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ</button>
                <button class="action-btn delete" onclick="deleteProduct(\'${product.id}\')">‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®</button>
            </td>
        </tr>
    `).join("");
}

console.log("Products module loaded");



